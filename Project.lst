Microsoft (R) Macro Assembler Version 14.29.30138.0	    08/18/23 07:41:56
'String Primitives and Macros Parameter			     Page 1 - 1


				TITLE String Primitives and Macros Parameters

				; Author:					Masaki Nishi
				; Description:				This program gathers 10 valid decimal integers from the user.
				;							It converts these integers into their corresponding numeric values and stores them in an array.
				;							Finally, it displays the list of integers, their sum, and the average value after the conversion.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; CONSTANTS
 = 0000000A			ARRAY_SIZE   = 10			; maximum number for the user input unsigned integers
 = 00000020			MAX_SIZE     = 32			; maximum length for the user input string
 =-80000000			MAX_NUM      = -2147483648

				; ---------------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Prompts the user to enter a signed integer, then store user inputted integer into a memory location.
				;
				; Precondition: none.
				;
				; Postcondition: none.
				;
				; Receives: 
				; mPromptMsg  = address of the prompt message 
				; mStringAddress = input address for the string
				; mStringLength = length of the input string
				;
				; Returns: 
				; mStringAddress = input address for the string
				; mStringLength = length of the input string
				; ---------------------------------------------------------------------------------------
				mGetString MACRO mPromptMsg, mStringAddress, mStringLength
					PUSHAD 

					MOV		EDX, mPromptMsg
					CALL	WriteString

					MOV		EDX, mStringAddress		; set address of string to EDX to store
					MOV		ECX, MAX_SIZE			; set buffer size for ReadString
					CALL	ReadString				; returns: EDX = address of user string, EAX = number of characters entered
					MOV		mStringLength, EAX		; store the length of the string

					POPAD
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Output the string.
				;
				; Preconditions: none.
				;
				; Postconditions: none.
				;
				; Receives:
				; mString = string address
				;			
				; Returns: none
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO mString
				    PUSH    EDX

				    ; display string
				    MOV     EDX, mString
				    CALL    WriteString

				    POP     EDX
				ENDM

 00000000			.data

				; statements
 00000000 44 65 73 69 67	    titleMsg			BYTE    "Designing low-level I/O procedures!", 13,10,0
	   6E 69 6E 67 20
	   6C 6F 77 2D 6C
	   65 76 65 6C 20
	   49 2F 4F 20 70
	   72 6F 63 65 64
	   75 72 65 73 21
	   0D 0A 00
 00000026 57 72 69 74 74	    authorMsg			BYTE	"Written by: Masaki Nishi", 13,10,0
	   65 6E 20 62 79
	   3A 20 4D 61 73
	   61 6B 69 20 4E
	   69 73 68 69 0D
	   0A 00
 00000041 50 6C 65 61 73	    instructionMsg		BYTE	"Please provide 10 signed decimal integers.", 0Ah
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0A
 0000006C  45 61 63 68 20						    BYTE	"Each number needs to be small enough to fit inside a 32 bit register." , 0Ah
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0A
 000000