Microsoft (R) Macro Assembler Version 14.29.30138.0	    08/18/23 15:21:35
<String Primitives and Macros Parameters     (LowLevel-IO.as  Page 1 - 1


				TITLE String Primitives and Macros Parameters     (LowLevel-IO.asm)

				; Author:					Masaki Nishi
				; Description:				This program gathers 10 valid decimal integers from the user.
				;							It converts these integers into their corresponding numeric values and stores them in an array.
				;							Finally, it displays the list of integers, their sum, and the average value after the conversion.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; CONSTANTS
 = 0000000A			ARRAY_SIZE   = 10		; maximum number for the user input unsigned integers
 = 00000032			MAX_SIZE     = 50		; maximum length for the user input string

 = 00000030			LO_ASCII	 = 48		; 0 in ASCII
 = 00000039			HI_ASCII	 = 57		; 9 in ASCII

				; ---------------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Prompts the user to enter a signed integer, then store user's entered integer into a memory.
				;
				; Precondition: none.
				;
				; Postcondition: none.
				;
				; Receives: 
				; mPromptMsg  = address of the prompt message 
				; mStringAddress = input address for the string
				; mStringLength = length of the input string
				;
				; Returns:
				; mStringLength = length of the input string
				; ---------------------------------------------------------------------------------------
				mGetString MACRO mPromptMsg, mStringAddress, mStringLength
					PUSHAD 

					MOV		EDX, mPromptMsg
					CALL	WriteString

					MOV		EDX, mStringAddress		; set address of string to EDX to store
					MOV		ECX, MAX_SIZE			; set buffer size for ReadString
					CALL	ReadString				; returns: EDX = address of user string, EAX = number of characters entered
					MOV		mStringLength, EAX		; store the length of the string

					POPAD
				ENDM

				; ---------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Output the string.
				;
				; Preconditions: none.
				;
				; Postconditions: none.
				;
				; Receives:
				; mString = string address
				;			
				; Returns: none
				; ---------------------------------------------------------------------------------
				mDisplayString MACRO mString
				    PUSH    EDX

				    ; display string
				    MOV     EDX, mString
				    CALL    WriteString

				    POP     EDX
				ENDM

 00000000			.data

				; statements
 00000000 44 65 73 69 67	    titleMsg			BYTE    "Designing low-level I/O procedures!", 13,10,0
	   6E 69 6E 67 20
	   6C 6F 77 2D 6C
	   65 76 65 6C 20
	   49 2F 4F 20 70
	   72 6F 63 65 64
	   75 72 65 73 21
	   0D 0A 00
 00000026 57 72 69 74 74	    authorMsg			BYTE	"Written by: Masaki Nishi", 13,10,0
	   65 6E 20 62 79
	   3A 20 4D 61 73
	   61 6B 69 20 4E
	   69 73 68 69 0D
	   0A 00
 00000041 50 6C 65 61 73	    instructionMsg		BYTE	"Please provide 10 signed decimal integers.", 0Ah
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0A
 0000006C  45 61 63 68 20						    BYTE	"Each number needs to be small enough to fit inside a 32 bit register." , 0Ah
	   6E 75 6D 62 65
	   72 20 6E 65 65
	   64 73 20 74 6F
	   20 62 65 20 73
	   6D 61 6C 6C 20
	   65 6E 6F 75 67
	   68 20 74 6F 20
	   66 69 74 20 69
	   6E 73 69 64 65
	   20 61 20 33 32
	   20 62 69 74 20
	   72 65 67 69 73
	   74 65 72 2E 0A
 000000B2  41 66 74 65 72						    BYTE    "After you have finished inputting the raw numbers I will display a list of the integers, their sum, and their average value.", 13,10,0
	   20 79 6F 75 20
	   68 61 76 65 20
	   66 69 6E 69 73
	   68 65 64 20 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 00

 00000131 2E 20 50 6C 65	    promptMsg           BYTE    ". Please enter an signed number: ", 0
	   61 73 65 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 3A 20 00
 00000153 45 52 52 4F 52	    errorMsg            BYTE    "ERROR: You did not enter an signed number or your number was too big.", 13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 6E 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 20 6F 72 20
	   79 6F 75 72 20
	   6E 75 6D 62 65
	   72 20 77 61 73
	   20 74 6F 6F 20
	   62 69 67 2E 0D
	   0A 00

 0000019B 0A 59 6F 75 20	    displayNumMsg       BYTE    10, "You entered the following numbers:", 10, 0
	   65 6E 74 65 72
	   65 64 20 74 68
	   65 20 66 6F 6C
	   6C 6F 77 69 6E
	   67 20 6E 75 6D
	   62 65 72 73 3A
	   0A 00
 000001C0 2C 20 00			space				BYTE	", ", 0

 000001C3 0A 54 68 65 20		sumMsg				BYTE	10, "The sum of these numbers is: ", 0
	   73 75 6D 20 6F
	   66 20 74 68 65
	   73 65 20 6E 75
	   6D 62 65 72 73
	   20 69 73 3A 20
	   00
 000001E2 0A 54 68 65 20		averageMsg			BYTE	10, "The truncated average is: ", 0
	   74 72 75 6E 63
	   61 74 65 64 20
	   61 76 65 72 61
	   67 65 20 69 73
	   3A 20 00

 000001FE 0A 54 68 61 6E		closingMsg			BYTE	10, "Thanks for playing! ", 0
	   6B 73 20 66 6F
	   72 20 70 6C 61
	   79 69 6E 67 21
	   20 00

				; variables
 00000214  0000000A [			numberArray			SDWORD	ARRAY_SIZE	DUP (?)	; an array of 10 valid integers from the user
	    00000000
	   ]
 0000023C  00000032 [			stringArray			BYTE	MAX_SIZE	DUP (?)	; convereted user's entered strings to output
	    00
	   ]
 0000026E  00000032 [			userInputValue		BYTE	MAX_SIZE	DUP (?)	; user's entered strings
	    00
	   ]

 000002A0 00000000			inputCharLength		DWORD	?					; length of the user's entered strings
 000002A4 00000000			convertedInput		SDWORD	?

 000002A8 00000000			isNegative			DWORD	0
 000002AC 00000000			currentTotal		DWORD	0
 000002B0 00000001			lineCount			DWORD	1	

 000002B4 00000000			sum					SDWORD	0
 000002B8 00000000			average				SDWORD	0

 00000000			.code

 00000000			main PROC
					; call introduction
 00000000  68 00000041 R		PUSH	OFFSET instructionMsg
 00000005  68 00000026 R		PUSH	OFFSET authorMsg
 0000000A  68 00000000 R		PUSH	OFFSET titleMsg
 0000000F  E8 0000010A			CALL	introduction

				;------------------------------------------------------------
				; propts the user to enter the numeric values,
				;	and converts the values to the signed integers.
				;------------------------------------------------------------
					; set up an array
 00000014  B9 0000000A			MOV		ECX, ARRAY_SIZE
 00000019  BF 00000214 R		MOV		EDI, OFFSET numberArray 

 0000001E				_getUserValue:
						; call ReadVal
 0000001E  6A 0A				PUSH	ARRAY_SIZE
 00000020  FF 35 000002A0 R			PUSH	inputCharLength
 00000026  68 0000026E R			PUSH	OFFSET userInputValue
 0000002B  68 00000131 R			PUSH	OFFSET promptMsg
 00000030  68 00000153 R			PUSH	OFFSET errorMsg
 00000035  68 000002A4 R			PUSH	OFFSET convertedInput
 0000003A  FF 35 000002AC R			PUSH	currentTotal
 00000040  FF 35 000002B0 R			PUSH	lineCount
 00000046  FF 35 000002A8 R			PUSH	isNegative
 0000004C  68 0000023C R			PUSH	OFFSET stringArray
 00000051  E8 000000F7				CALL	ReadVal

 00000056  A1 000002A4 R			MOV		EAX, DWORD PTR convertedInput
 0000005B  89 07				MOV		[EDI], EAX						; store convertedInput value into the numberArray
 0000005D  FF 05 000002B0 R			INC		lineCount
 00000063  03 D8				ADD		EBX, EAX

 00000065  83 C7 04				ADD		EDI, 4							; point to next element
 00000068  E2 B4				LOOP	_getUserValue

				;------------------------------------------------------------
				; outputs the list of the user's entered signed integers.
				;------------------------------------------------------------
					; set up an array
 0000006A  B9 0000000A			MOV		ECX, ARRAY_SIZE	
 0000006F  BE 00000214 R		MOV		ESI, OFFSET numberArray

					mDisplayString OFFSET displayNumMsg
 00000074  52		     1	    PUSH    EDX
 00000075  BA 0000019B R     1	    MOV     EDX, OFFSET displayNumMsg
 0000007A  E8 00000000 E     1	    CALL    WriteString
 0000007F  5A		     1	    POP     EDX

 00000080				_outputUserValue:
						; call WriteVal
 00000080  6A 0A				PUSH	ARRAY_SIZE
 00000082  FF 36				PUSH	[ESI]
 00000084  68 0000023C R			PUSH	OFFSET stringArray
 00000089  E8 0000015D				CALL	WriteVal

 0000008E  83 F9 01				CMP		ECX, 1				; quit if end of loop
 00000091  74 11				JE		_computeSum

						mDisplayString	OFFSET space		
 00000093  52		     1	    PUSH    EDX
 00000094  BA 000001C0 R     1	    MOV     EDX, OFFSET space
 00000099  E8 00000000 E     1	    CALL    WriteString
 0000009E  5A		     1	    POP     EDX

 0000009F  83 C6 04				ADD		ESI, 4				; point to next element
 000000A2  E2 DC				LOOP	_outputUserValue

				;------------------------------------------------------------
				; compute the sum and average of the user's entered signed integers.
				;------------------------------------------------------------
 000000A4				_computeSum:
						; set up an array
 000000A4  B9 0000000A				MOV		ECX, ARRAY_SIZE
 000000A9  BE 00000214 R			MOV		ESI, OFFSET numberArray

 000000AE  B8 00000000				MOV		EAX, 0				; initialize the sum

 000000B3					_computeLoop:
							; calculate the sum
 000000B3  03 06					ADD		EAX, [ESI]		; add current element
 000000B5  83 C6 04					ADD		ESI, 4			; go to next element
 000000B8  E2 F9					LOOP	_computeLoop
 000000BA  A3 000002B4 R				MOV		sum, EAX			

						; calculate the average
 000000BF  A1 000002B4 R			MOV		EAX, sum
 000000C4  99					CDQ							; clear EDX before IDIV
 000000C5  BB 0000000A				MOV		EBX, ARRAY_SIZE
 000000CA  F7 FB				IDIV	EBX						
 000000CC  A3 000002B8 R			MOV		average, EAX

				;------------------------------------------------------------
				; output the sum and the average
				;------------------------------------------------------------	
					; output the sum
					mDisplayString OFFSET sumMsg
 000000D1  52		     1	    PUSH    EDX
 000000D2  BA 000001C3 R     1	    MOV     EDX, OFFSET sumMsg
 000000D7  E8 00000000 E     1	    CALL    WriteString
 000000DC  5A		     1	    POP     EDX
 000000DD  6A 0A			PUSH	ARRAY_SIZE
 000000DF  FF 35 000002B4 R		PUSH	sum
 000000E5  68 0000023C R		PUSH	OFFSET stringArray
 000000EA  E8 000000FC			CALL	WriteVal

					; output the average
					mDisplayString OFFSET averageMsg
 000000EF  52		     1	    PUSH    EDX
 000000F0  BA 000001E2 R     1	    MOV     EDX, OFFSET averageMsg
 000000F5  E8 00000000 E     1	    CALL    WriteString
 000000FA  5A		     1	    POP     EDX
 000000FB  6A 0A			PUSH	ARRAY_SIZE
 000000FD  FF 35 000002B8 R		PUSH	average
 00000103  68 0000023C R		PUSH	OFFSET stringArray
 00000108  E8 000000DE			CALL	WriteVal

					; call goodbye
 0000010D  68 000001FE R		PUSH	OFFSET closingMsg
 00000112  E8 00000123			CALL	goodbye

					; exit to operating system
					Invoke	ExitProcess,0
 00000117  6A 00	   *	    push   +000000000h
 00000119  E8 00000000 E   *	    call   ExitProcess
 0000011E			main ENDP

				; ---------------------------------------------------------------------------------------
				; Name: introduction
				; Output program title, my name, and instructions for user.
				;
				; Preconditions: none.
				;
				; Postconditions: none.
				;
				; Receives:
				; [EBP+16] = instructionsMsg
				; [EBP+12] = authorMsg
				; [EBP+8]  = titleMsg
				;
				; Returns: none
				; ---------------------------------------------------------------------------------------
 0000011E			introduction PROC
 0000011E  55				PUSH	EBP
 0000011F  8B EC			MOV		EBP, ESP
					
					mDisplayString  [EBP+8]
 00000121  52		     1	    PUSH    EDX
 00000122  8B 55 08	     1	    MOV     EDX, [EBP+8]
 00000125  E8 00000000 E     1	    CALL    WriteString
 0000012A  5A		     1	    POP     EDX
					mDisplayString	[EBP+12]
 0000012B  52		     1	    PUSH    EDX
 0000012C  8B 55 0C	     1	    MOV     EDX, [EBP+12]
 0000012F  E8 00000000 E     1	    CALL    WriteString
 00000134  5A		     1	    POP     EDX
 00000135  E8 00000000 E		CALL	CrLf
					mDisplayString	[EBP+16]
 0000013A  52		     1	    PUSH    EDX
 0000013B  8B 55 10	     1	    MOV     EDX, [EBP+16]
 0000013E  E8 00000000 E     1	    CALL    WriteString
 00000143  5A		     1	    POP     EDX
 00000144  E8 00000000 E		CALL	CrLf

 00000149  5D				POP		EBP
 0000014A  C2 000C			RET		12
 0000014D			introduction ENDP

				; ---------------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Converts the user's entered ASCII digit strings to its signed integer value. 
				;
				; Preconditions: none.
				;
				; Postconditions: none.
				;
				; Receives:
				; [EBP+44] = ARRAY_SIZE
				; [EBP+40] = inputCharLength
				; [EBP+36] = userInputValue
				; [EBP+32] = promptMsg
				; [EBP+28] = errorMsg
				; [EBP+24] = convertedInput
				; [EBP+20] = currentTotal
				; [EBP+16] = lineCount
				; [EBP+12] = isNegative
				; [EBP+8]  = stringArray
				;
				; Returns: convertedInput
				; ---------------------------------------------------------------------------------------
 0000014D			ReadVal PROC
					; set up stack frame
 0000014D  55				PUSH	EBP
 0000014E  8B EC			MOV		EBP, ESP
 00000150  60				PUSHAD

 00000151			_promptUser:
					; output the line number
 00000151  FF 75 2C			PUSH	[EBP+44]
 00000154  FF 75 10			PUSH	[EBP+16]
 00000157  FF 75 08			PUSH	[EBP+8]
 0000015A  E8 0000008C			CALL	WriteVal

					; get value from the user
					mGetString	[EBP+32], [EBP+36], [EBP+40]	; mPromptMsg, mStringAddress, mStringLength
 0000015F  60		     1		PUSHAD 
 00000160  8B 55 20	     1		MOV		EDX, [EBP+32]
 00000163  E8 00000000 E     1		CALL	WriteString
 00000168  8B 55 24	     1		MOV		EDX, [EBP+36]		; set address of string to EDX to store
 0000016B  B9 00000032	     1		MOV		ECX, MAX_SIZE			; set buffer size for ReadString
 00000170  E8 00000000 E     1		CALL	ReadString				; returns: EDX = address of user string, EAX = number of characters entered
 00000175  89 45 28	     1		MOV		[EBP+40], EAX		; store the length of the string
 00000178  61		     1		POPAD
 00000179  8B 4D 28			MOV		ECX, [EBP+40]						; store length of the input string 
 0000017C  8B 75 24			MOV		ESI, [EBP+36]						; store strings

					; setup for String Primitives
 0000017F  8B 7D 18			MOV		EDI, [EBP+24]		
 00000182  FC				CLD											

 00000183			_signCheck:
 00000183  AC				LODSB						; MOV AL, [ESI]

 00000184  8B 5D 28			MOV		EBX, [EBP+40]		; inputCharLength

					; if "+ / -"
 00000187  3B D9			CMP		EBX, ECX
 00000189  75 11			JNE		_convertToInt

					; if negative
 0000018B  3C 2D			CMP		AL, 45				
 0000018D  74 06			JE		_isNegative

					; if positive
 0000018F  3C 2B			CMP		AL, 43				
 00000191  74 29			JE		_goNext

 00000193  EB 07			JMP		_convertToInt

 00000195				_isNegative:
 00000195  B0 01				MOV		AL, 1
 00000197  88 45 0C				MOV		[EBP+12], AL	; set negative flag
 0000019A  EB 20				JMP		_goNext

 0000019C				_convertToInt:
						; validate the input character. 48 to 57 is valid integer in ASCII
 0000019C  3C 30				CMP		AL, LO_ASCII
 0000019E  7C 2C				JL		_promptUserAgain 

 000001A0  3C 39				CMP		AL, HI_ASCII
 000001A2  7F 28				JG		_promptUserAgain

						; subtract 48, then add it to 10-times the current total to convert to the integer
 000001A4  2C 30				SUB		AL, LO_ASCII
 000001A6  0F BE C0				MOVSX	EAX, AL				; move with sign of signed integer
 000001A9  50					PUSH	EAX

 000001AA  8B 45 14				MOV		EAX, [EBP+20]
 000001AD  BB 0000000A				MOV		EBX, 10
 000001B2  F7 E3				MUL		EBX					; current value * 10
 000001B4  5B					POP		EBX
 000001B5  70 15				JO		_promptUserAgain	; overflow validation

 000001B7  03 C3				ADD		EAX, EBX
 000001B9  89 45 14				MOV		[EBP+20], EAX		; store to currentTotal

 000001BC				_goNext:
 000001BC  E2 C5				LOOP	_signCheck 

 000001BE  8B 5D 0C				MOV		EBX, [EBP+12]
 000001C1  83 FB 01				CMP		EBX, 1
 000001C4  75 02				JNE		_validated
 000001C6  F7 D8				NEG		EAX				; multiplying by -1

 000001C8				_validated:
 000001C8  89 07				MOV		[EDI], EAX		; store the validated value
 000001CA  EB 1A				JMP		_quit

 000001CC				_promptUserAgain:
						; output the error message and reprompt user to enter valid value
						mDisplayString	[EBP+28]
 000001CC  52		     1	    PUSH    EDX
 000001CD  8B 55 1C	     1	    MOV     EDX, [EBP+28]
 000001D0  E8 00000000 E     1	    CALL    WriteString
 000001D5  5A		     1	    POP     EDX
 000001D6  BB 00000000				MOV		EBX, 0

 000001DB  89 5D 0C				MOV		[EBP+12], EBX	; reset isNegative
 000001DE  89 5D 14				MOV		[EBP+20], EBX	; reset currentTotal
 000001E1  E9 FFFFFF6B				JMP		_promptUser

 000001E6			_quit:
 000001E6  61				POPAD
 000001E7  5D				POP		EBP
 000001E8  C2 0028			RET		40
 000001EB			ReadVal	ENDP

				; ---------------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Converts a signed integer value to ASCII digit string, then outputs the string.
				;
				; Preconditions: none.
				;
				; Postconditions: none.
				;
				; Receives:
				; [EBP+16] = ARRAY_SIZE
				; [EBP+12] = signed integer (will be converted to ASCII)
				; [EBP+8] = stringArray
				;
				; Returns: none.
				; ---------------------------------------------------------------------------------------
 000001EB			WriteVal PROC
					; set up stack frame
 000001EB  55				PUSH	EBP
 000001EC  8B EC			MOV		EBP, ESP
 000001EE  60				PUSHAD						

					; setup stringArray and signed integer to be converted
 000001EF  8B 7D 08			MOV		EDI, [EBP+8]
 000001F2  8B 75 0C			MOV		ESI, [EBP+12]
 000001F5  8B C6			MOV		EAX, ESI
					
 000001F7  B9 00000000			MOV		ECX, 0			; initialize counter

					; if positive
 000001FC  83 F8 00			CMP		EAX, 0
 000001FF  7D 07			JGE		_convertToStr

					; if negative
 00000201  F7 D8			NEG		EAX				; multiplying by -1
 00000203  50				PUSH	EAX
 00000204  B0 2D			MOV		AL, 45			; add the - sign to the value
 00000206  AA				STOSB					; MOV [EDI], AL
 00000207  58				POP		EAX

 00000208				_convertToStr:
						; divide by 10, then add 48 to the reminder to convert to the string
 00000208  BB 0000000A				MOV		EBX, 10
 0000020D  BA 00000000				MOV		EDX, 0
 00000212  99					CDQ						; clear EDX before IDIV
 00000213  F7 FB				IDIV	EBX				; EAX / 10
 00000215  41					INC		ECX				; increment counter

 00000216  83 C2 30				ADD		EDX, LO_ASCII
 00000219  52					PUSH	EDX				; store converted ASCII (remainder + 48)

 0000021A  83 F8 00				CMP		EAX, 0
 0000021D  74 02				JZ		_alignStr		; quit if quotient is 0
 0000021F  75 E7				JNZ		_convertToStr	; continue if quotien is not 0

 00000221				_alignStr:
 00000221  58					POP		EAX
 00000222  AA					STOSB
 00000223  E2 FC				LOOP	_alignStr 

 00000225  B8 00000000				MOV		EAX, 0			; reset the string
 0000022A  AA					STOSB

					; output the strings
					mDisplayString [EBP+8]
 0000022B  52		     1	    PUSH    EDX
 0000022C  8B 55 08	     1	    MOV     EDX, [EBP+8]
 0000022F  E8 00000000 E     1	    CALL    WriteString
 00000234  5A		     1	    POP     EDX

 00000235  61				POPAD
 00000236  5D				POP		EBP
 00000237  C2 000C			RET		12
 0000023A			WriteVal ENDP

				; ---------------------------------------------------------------------------------
				; Name: goodbye
				;
				; Display a closing message.
				;
				; Preconditions: none.
				;
				; Postconditions: none.
				;
				; Receives:
				; [EBP+8] = closingMsg
				;
				; Returns: nothing.
				; ---------------------------------------------------------------------------------
 0000023A			goodbye PROC
 0000023A  55				PUSH	EBP
 0000023B  8B EC			MOV		EBP, ESP

 0000023D  E8 00000000 E		CALL	CrLf
					mDisplayString [EBP+8]
 00000242  52		     1	    PUSH    EDX
 00000243  8B 55 08	     1	    MOV     EDX, [EBP+8]
 00000246  E8 00000000 E     1	    CALL    WriteString
 0000024B  5A		     1	    POP     EDX

 0000024C  5D				POP		EBP
 0000024D  C2 0004			RET		4
 00000250			goodbye ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30138.0	    08/18/23 15:21:35
<String Primitives and Macros Parameters     (LowLevel-IO.as  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002BC Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000250 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000014D _TEXT	Length= 0000009E Public STDCALL
  _promptUser  . . . . . . . . .	L Near	 00000151 _TEXT	
  _signCheck . . . . . . . . . .	L Near	 00000183 _TEXT	
  _isNegative  . . . . . . . . .	L Near	 00000195 _TEXT	
  _convertToInt  . . . . . . . .	L Near	 0000019C _TEXT	
  _goNext  . . . . . . . . . . .	L Near	 000001BC _TEXT	
  _validated . . . . . . . . . .	L Near	 000001C8 _TEXT	
  _promptUserAgain . . . . . . .	L Near	 000001CC _TEXT	
  _quit  . . . . . . . . . . . .	L Near	 000001E6 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001EB _TEXT	Length= 0000004F Public STDCALL
  _convertToStr  . . . . . . . .	L Near	 00000208 _TEXT	
  _alignStr  . . . . . . . . . .	L Near	 00000221 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
goodbye  . . . . . . . . . . . .	P Near	 0000023A _TEXT	Length= 00000016 Public STDCALL
introduction . . . . . . . . . .	P Near	 0000011E _TEXT	Length= 0000002F Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000011E Public STDCALL
  _getUserValue  . . . . . . . .	L Near	 0000001E _TEXT	
  _outputUserValue . . . . . . .	L Near	 00000080 _TEXT	
  _computeSum  . . . . . . . . .	L Near	 000000A4 _TEXT	
  _computeLoop . . . . . . . . .	L Near	 000000B3 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAY_SIZE . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI_ASCII . . . . . . . . . . . .	Number	 00000039h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO_ASCII . . . . . . . . . . . .	Number	 00000030h   
MAX_SIZE . . . . . . . . . . . .	Number	 00000032h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
authorMsg  . . . . . . . . . . .	Byte	 00000026 _DATA	
averageMsg . . . . . . . . . . .	Byte	 000001E2 _DATA	
average  . . . . . . . . . . . .	DWord	 000002B8 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
closingMsg . . . . . . . . . . .	Byte	 000001FE _DATA	
convertedInput . . . . . . . . .	DWord	 000002A4 _DATA	
currentTotal . . . . . . . . . .	DWord	 000002AC _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displayNumMsg  . . . . . . . . .	Byte	 0000019B _DATA	
errorMsg . . . . . . . . . . . .	Byte	 00000153 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inputCharLength  . . . . . . . .	DWord	 000002A0 _DATA	
instructionMsg . . . . . . . . .	Byte	 00000041 _DATA	
isNegative . . . . . . . . . . .	DWord	 000002A8 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineCount  . . . . . . . . . . .	DWord	 000002B0 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
numberArray  . . . . . . . . . .	DWord	 00000214 _DATA	
promptMsg  . . . . . . . . . . .	Byte	 00000131 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 000001C0 _DATA	
stringArray  . . . . . . . . . .	Byte	 0000023C _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 000001C3 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000002B4 _DATA	
titleMsg . . . . . . . . . . . .	Byte	 00000000 _DATA	
userInputValue . . . . . . . . .	Byte	 0000026E _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
